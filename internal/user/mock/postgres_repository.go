// Code generated by MockGen. DO NOT EDIT.
// Source: postgres_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/sergio-id/go-grpc-user-microservice/internal/user/domain"
)

// MockPostgresqlRepository is a mock of PostgresqlRepository interface.
type MockPostgresqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresqlRepositoryMockRecorder
}

// MockPostgresqlRepositoryMockRecorder is the mock recorder for MockPostgresqlRepository.
type MockPostgresqlRepositoryMockRecorder struct {
	mock *MockPostgresqlRepository
}

// NewMockPostgresqlRepository creates a new mock instance.
func NewMockPostgresqlRepository(ctrl *gomock.Controller) *MockPostgresqlRepository {
	mock := &MockPostgresqlRepository{ctrl: ctrl}
	mock.recorder = &MockPostgresqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresqlRepository) EXPECT() *MockPostgresqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostgresqlRepository) Create(ctx context.Context, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostgresqlRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostgresqlRepository)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockPostgresqlRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPostgresqlRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostgresqlRepository)(nil).Delete), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockPostgresqlRepository) GetByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockPostgresqlRepositoryMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockPostgresqlRepository)(nil).GetByEmail), ctx, email)
}

// GetById mocks base method.
func (m *MockPostgresqlRepository) GetById(ctx context.Context, id uint64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPostgresqlRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPostgresqlRepository)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockPostgresqlRepository) Update(ctx context.Context, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPostgresqlRepositoryMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostgresqlRepository)(nil).Update), ctx, user)
}
